module Euler2 where

import Prelude

import Data.List (List, range, filter, takeWhile)
import Data.Foldable (sum)

-- Each new term in the Fibonacci sequence is generated by adding the previous
-- two terms. By starting with 1 and 2, the first 10 terms will be:
--
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


fib :: Int -> Int
fib 0 = 1
fib 1 = 1
fib n = fib ( n - 1 ) + fib ( n - 2 )

ns :: List Int
ns = range 0 4000000


fibsIndexesLessThanFourMillion :: List Int
fibsIndexesLessThanFourMillion = takeWhile (\n -> fib n <= 4000000) ns

fibsLessThanFourMillion :: List Int
fibsLessThanFourMillion = map (\n -> fib n) fibsIndexesLessThanFourMillion

evens :: List Int
evens = filter (\n -> mod n 2 == 0) fibsLessThanFourMillion

answer2 :: Int
answer2 = sum evens
